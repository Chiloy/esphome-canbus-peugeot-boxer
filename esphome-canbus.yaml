substitutions:
  name: "esphome-canbus"
  friendly_name: ESPHome CANbus

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  level: INFO

time:
  - platform: homeassistant
    id: homeassistant_time

api:
  # ... (If you need API, add your configuration here) ...

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  output_power: 8.5

captive_portal:
  # ... (If you need captive portal, add your configuration here) ...

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

web_server:
  # ... (If you need web server, add your configuration here) ...

canbus:
  - platform: esp32_can
    id: my_canbus
    tx_pin: GPIO01
    rx_pin: GPIO03
    
    can_id: 0x0000000 
    bit_rate: 50kbps  
    on_frame:

      #Date & Time
      # ID:0x0C214003, 6 Bytes
      - can_id: 0x0C214003
        use_extended_id: true
        then:
          - lambda: |-
              if (x.size() > 5) {

                char date_str[11];
                snprintf(date_str, sizeof(date_str), "%02X/%02X/%02X%02X", x[2],x[3],x[4],x[5]);
                
                char time_str[6];
                snprintf(time_str, sizeof(time_str), "%02X:%02X",  x[0],x[1]);
                
                id(can_bus_date).publish_state(date_str);  
                id(can_bus_time).publish_state(time_str);
              }




sensor:

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  # ... (Your sensor definitions remain the same) ...

binary_sensor:
  # ... (Your binary sensor definitions remain the same) ...
  
text_sensor:
  - platform: template
    name: "CAN Bus Time"
    id: can_bus_time

  - platform: template
    name: "CAN Bus Date"
    id: can_bus_date

switch:
  # ... (Your switch definitions remain the same) ...

button:
  - platform: template
    name: "Set Date and Time (Reset)"
    id: set_date_and_time_reset
    icon: mdi:clock
    on_press:
      - lambda: |-
          uint32_t can_id = 0x0C214024;
          bool use_extended_id = 1;
          std::vector<uint8_t> data{ 0x01, 0x02, 0x03, 0x04, 0x20, 0x24, 0x00, 0x00 };
          id(my_canbus)->send_data(can_id, use_extended_id, data);
          ESP_LOGI("canbus", "CAN Data: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X",data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]); 

  - platform: template
    name: "Set Date and Time (Now)"
    id: set_date_and_time_now
    icon: mdi:clock
    on_press:
      - lambda: |-
          // Get the current time from the Home Assistant time component
          auto time = id(homeassistant_time).now(); 

          if (time.is_valid()) {
            // Extract the relevant time components
            uint8_t hour = time.hour;
            uint8_t can_hour = hour <= 9 ? hour : hour + 16; 

            uint8_t minute = time.minute + 16;
            uint8_t can_minute = minute <= 9 ? minute : minute + 16; 

            uint8_t day = time.day_of_month + 16;
            uint8_t can_day = day <= 9 ? day : day + 16; 

            uint8_t month = time.month + 16;
            uint8_t can_month = month <= 9 ? month : month + 16; 

            uint16_t year = time.year;

            //ESP_LOGI("time", "Hour: 0x%02d Min: 0x%02d Day: 0x%02d Month: 0x%02d Year: 0x%04d", hour, minute, day, month, year); 

            // Format the data for your CAN message
            // (Adjust the byte order and format as needed for your specific CAN message)
            std::vector<uint8_t> data = {
              time.hour, 
              static_cast<uint8_t>(can_minute), 
              static_cast<uint8_t>(can_day), 
              static_cast<uint8_t>(can_month), 
              static_cast<uint8_t>(year >> 8),  
              static_cast<uint8_t>(year & 0xFF),
            };

            // Send the CAN message
            //std::vector<uint8_t> data = {0x17, 0x36, 0x17, 0x11, 0x20, 0x24, 0x00, 0x00};

            // this works 
            // id(my_canbus)->send_data(0x0C214024, true, {0x17, 0x36, 0x17, 0x11, 0x20, 0x24, 0x00, 0x00});

            id(my_canbus)->send_data(0x0C214024, true, data);

            // ESP_LOGI("canbus", "CAN Data: 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X",data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7]); 

          } else {
            ESP_LOGE("button", "Invalid time from Home Assistant");
          }


  - platform: template
    name: "Set Date and Time (Now) 2"
    id: set_date_and_time_now_2
    on_press:
      - lambda: |-
        auto time = id(homeassistant_time).now(); 
        if (time.is_valid()) {
          int year = time.year;
          char buf[26]; 
          sprintf(buf, "0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x", 
                  time.hour, time.minute, time.day, time.month, year / 100, year % 100);
          // Convert the formatted string to a vector of bytes
          std::vector<uint8_t> data(buf, buf + strlen(buf)); 
          id(my_canbus).transmit(0x0C214024, data.data(), data.size()); 
        } else {
          ESP_LOGE("button", "Invalid time from Home Assistant");
        }
